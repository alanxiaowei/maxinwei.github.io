[{"title":"mybatis-plus快速入门.md","url":"/2019/05/26/mybatis-plus快速入门/","content":"\n## 官网介绍\n\n[MyBatis-Plus](https://github.com/baomidou/mybatis-plus)（简称 MP）是一个 [MyBatis](http://www.mybatis.org/mybatis-3/) 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。\n\n详见[https://mp.baomidou.com](https://mp.baomidou.com/)\n\n## 使用感受\n\n使用mybatis-plus，在简单业务场景下，可以极大程度提高CRUD开发效率；在海量数据,复杂的多表级联查询场景下慎用分页插件中count方法获取总数量，容易造成数据库IO阻塞等问题，需要根据实际业务场景，进行SQL优化，不可简单的使用默认接口。\n\n## 快速入门\n\n### 环境准备\n\n- SpringBoot 2.2.0.M3\n- MyBatis-Plus 3.1.1\n- MySQL 5.7\n\n#### SQL脚本\n\n```sql\nDROP TABLE IF EXISTS user;\nCREATE TABLE user\n(\n\tid BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT '主键ID',\n\tname VARCHAR(30) NULL DEFAULT NULL COMMENT '姓名',\n\tgender VARCHAR(20) NULL DEFAULT NULL COMMENT '性别',\n\tage INT(11) NULL DEFAULT NULL COMMENT '年龄',\n\temail VARCHAR(50) NULL DEFAULT NULL COMMENT '邮箱',\n\tPRIMARY KEY (id)\n);\nDELETE FROM user;\nINSERT INTO user (name,gender,age, email) VALUES\n('Jone','MALE' ,18, 'test1@baomidou.com'),\n( 'Jack', 'MALE' ,20, 'test2@baomidou.com'),\n( 'Tom', 'MALE' ,28, 'test3@baomidou.com'),\n( 'Sandy','FEMALE' , 21, 'test4@baomidou.com'),\n( 'Billie', 'MALE' ,24, 'test5@baomidou.com');\n```\n\n### 配置\n\n#### pom.xml\n\n一定要依赖jsqlparser，否则在使用分页插件时会报错java.lang.NoClassDefFoundError: net/sf/jsqlparser/expression/Expression导致java.lang.NoClassDefFoundError: Could not initialize class com.baomidou.mybatisplus.extension.plugins.pagination.optimize.JsqlParserCountOptimize \n\n```xml\n\t\t\t\t<dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.1.1</version>\n        </dependency>\n\t\t\t\t<dependency>\n            <groupId>com.github.jsqlparser</groupId>\n            <artifactId>jsqlparser</artifactId>\n            <version>2.0</version>\n        </dependency>\n\t\t\t\t<dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-generator</artifactId>\n            <version>3.1.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.freemarker</groupId>\n            <artifactId>freemarker</artifactId>\n            <version>2.3.28</version>\n        </dependency>\n```\n\n#### application.yml\n\n```yaml\nmybatis-plus:\n  #在多工程项目中建议使用classpath*配置（即加载多个 jar 包下的 XML 文件）\n  mapper-locations: classpath*:/mapper/**/*.xml\n  #实体类包路径,不要配置为父级包路径，会导致启动加载时出现错误The alias 'xxx' is already mapped to the value 'com.xxx.xxx'\n  typeAliasesPackage: com.mxw.doraemon.entity\n  #枚举属性对应的包路径\n  typeEnumsPackage: com.mxw.doraemon.entity.enums\n  global-config:\n    #主键类型  0:\"数据库ID自增\", 1:\"用户输入ID\",2:\"全局唯一ID (数字类型唯一ID)\", 3:\"全局唯一ID UUID\";\n    id-type: 0\n    #字段策略 0:\"忽略判断\",1:\"非 NULL 判断\"),2:\"非空判断\"\n    field-strategy: 2\n    db-column-underline: true\n    refresh-mapper: true\n    logic-delete-value: 0\n    logic-not-delete-value: 1\n  configuration:\n    map-underscore-to-camel-case: true\n    cache-enabled: false\n```\n\n对于`IDEA`系列编辑器，XML 文件是不能放在 java 文件夹中的，IDEA 默认不会编译源码文件夹中的 XML 文件，可以参照以下方式解决：\n\n- 将配置文件放在 resource 文件夹中\n- 对于 Maven 项目，可指定 POM 文件的 resource\n\n```xml\n<build>\n  <resources>\n      <resource>\n          <!-- xml放在java目录下-->\n          <directory>src/main/java</directory>\n          <includes>\n              <include>**/*.xml</include>\n          </includes>\n      </resource>\n      <!--指定资源的位置（xml放在resources下，可以不用指定）-->\n      <resource>\n          <directory>src/main/resources</directory>\n      </resource>\n  </resources>\n</build>\n```\n\n#### MapperScan注解\n\n```java\n@EnableTransactionManagement\n@Configuration\n@MapperScan(\"com.mxw.doraemon.mapper\")\npublic class MybatisPlusConfig {\n\t/**\n\t * 分页拦截器\n\t * @return\n\t */\n\t@Bean\n\tpublic PaginationInterceptor paginationInterceptor() {\n\t\treturn new PaginationInterceptor();\n\t}\n\n}\n```\n\n### 编码\n\n#### Entity\n\n使用*Lombok*优雅的编写Bean，通过注解无需再通过IDE工具生成构造方法和get/set方法，可以在开发中直接调用Bean的set/get方法。下方构造方法是因为测试代码需要而写，可以忽略。\n\n##### User\n\n```java\n@Data\n@EqualsAndHashCode(callSuper = true)\n@Accessors(chain = true)\npublic class User extends BaseEntity {\n\n\tprivate static final long serialVersionUID = 125341736548392818L;\n\n\t/**\n\t * 姓名\n\t */\n\tprivate String name;\n\n\t/**\n\t * 性别\n\t */\n\tprivate GenderEnum gender;\n\n\t/**\n\t * 年龄\n\t */\n\tprivate Integer age;\n\n\t/**\n\t * 邮箱\n\t */\n\tprivate String email;\n\n\tpublic User() {\n\t\tsuper();\n\t}\n\n\tpublic User(String name, GenderEnum gender, Integer age, String email) {\n\t\tthis.name = name;\n\t\tthis.gender = gender;\n\t\tthis.age = age;\n\t\tthis.email = email;\n\t}\n}\n```\n\n##### BaseEntity\n\n```java\n@Data\n@Accessors(chain = true)\npublic class BaseEntity {\n\n  @TableId(type = IdType.AUTO)\n  private Long id;\n\n}\n```\n\n#### Enums\n\n```java\npublic enum GenderEnum implements IEnum {\n    MALE(\"MALE\", \"男\"),\n    FEMALE(\"FEMALE\", \"女\"),;\n  \n    private String value;\n    private String desc;\n\n    GenderEnum(final String value, final String desc) {\n        this.value = value;\n        this.desc = desc;\n    }\n\n    @Override\n    public Serializable getValue() {\n        return this.value;\n    }\n\n    @JsonValue\n    public String getDesc(){\n        return this.desc;\n    }\n}\n```\n\n#### Mapper Interface\n\nBaseMapper接口已包含常用CRUD方法，例如：根据主键ID查询，根据实体条件查询，根据条件器封装复杂条件查询，根据主键更新属性，根据主键删除实体等常用操作，所以这里只需写业务需要的复杂接口即可。\n\n```java\npublic interface UserMapper extends BaseMapper<User> {\n  \n   List<User> getByNameSQLXML(@Param(\"name\") String name);\n  \n   @Select(\"select * from user where name ='${name}'\")\n   List<User> getByNameSQL(@Param(\"name\") String name);\n}\n```\n\n#### Mapper XML\n\nmybatis-plus兼容mybatis原生功能，依然可以在XML中写SQL\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.mxw.doraemon.mapper.UserMapper\">\n    <resultMap id=\"user\" type=\"com.mxw.doraemon.entity.User\"/>\n    <parameterMap id=\"user\" type=\"com.mxw.doraemon.entity.User\"/>\n    \n    <select id=\"getByNameSQLXML\" resultMap=\"user\" parameterType=\"java.lang.String\">\n        SELECT  * FROM USER where name= #{name,jdbcType=VARCHAR}\n    </select>\n    \n</mapper>\n\n```\n\n#### Controler\n\n最好在Mapper接口层之上，再封装一层Service适配层，这样即使项目更换持久层技术，可以保证不影响主业务逻辑代码；在Service层可以添加@Transaction事务注解，直接在方法上添加事物注解，会因为spring bean代理机制，导致事务不生效；这里为了方便演示测试，直接在Controler里以Get请求调用Mapper，对数据库进行操作。\n\n```java\n@RestController\n@RequestMapping(\"/user\")\npublic class UserController {\n\n\t@Autowired\n\tprivate UserMapper userMapper;\n\n\n\t/**\n\t * 创建用户\n\t * http://localhost:8726/user/createUser?name=alan&gender=MALE&age=18&email=alanxiaowei@hotmail.com\n\t *\n\t * @param name\n\t * @return\n\t */\n\t@GetMapping(\"/createUser\")\n\tpublic String createUser(String name,String gender,Integer age,String email) {\n\t\tUser user = new User(name,GenderEnum.valueOf(gender),age,email);\n\n\t\tInteger index = userMapper.insert(user);\n\t\tif (index > 0) {\n\t\t\treturn \"已创建用户:\"+user.toString();\n\t\t} else {\n\t\t\treturn \"创建用户失败\";\n\t\t}\n\t}\n\n\t/**\n\t * 根据编号查询用户信息\n\t * http://localhost:8726/user/getUserById?userId=1\n\t *\n\t * @param userId\n\t * @return\n\t */\n\t@GetMapping(\"/getUserById\")\n\tpublic User getUserById(Integer userId) {\n\t\treturn userMapper.selectById(userId);\n\t}\n\n\t/**\n\t * 根据名称查询用户信息（Mybatis方式执行XML配置文件中SQL）\n\t * http://localhost:8726/user/geUserByName1?name=alan\n\t *\n\t * @return\n\t */\n\t@GetMapping(\"/geUserByName1\")\n\tpublic List<User> getUserByNameXML(String name) {\n\t\treturn userMapper.getByNameSQLXML(name);\n\t}\n\n\n\t/**\n\t * 根据名称查询用户信息（MyBatisPlus Map条件方式）\n\t * http://localhost:8726/user/geUserByName2?name=alan\n\t *\n\t * @param userName\n\t * @return\n\t */\n\t@GetMapping(\"/geUserByName2\")\n\tpublic List<User> getUserByNameMap(String name) {\n\t\tMap map = new HashMap();\n\t\tmap.put(\"name\", name);\n\t\treturn userMapper.selectByMap(map);\n\t}\n\n\t/**\n\t * 根据名称查询用户信息（MyBatisPlus方式执行mapper注解中SQL）\n\t * http://localhost:8726/user/geUserByName3?name=alan\n\t *\n\t * @param userName\n\t * @return\n\t */\n\t@GetMapping(\"/geUserByName3\")\n\tpublic List<User> getUserListByNameSQL(String name) {\n\t\treturn userMapper.getByNameSQL(name);\n\t}\n\n\t/**\n\t * 分页查询用户列表\n\t * http://localhost:8726/user/getList?pageNumber=1&pageSize=2\n\t *\n\t * @param pageNumber\n\t * @param pageSize\n\t * @return\n\t */\n\t@GetMapping(\"/getList\")\n\tpublic List<User> getList(Integer pageNumber, Integer pageSize) {\n\t\tIPage<User> page = new Page<>(pageNumber, pageSize);\n\t\treturn userMapper.selectPage(page,null).getRecords();\n\t}\n\n\t/**\n\t * 修改用户\n\t * http://localhost:8726/user/updateUser?name=alan&age=32\n\t *\n\t * @param id\n\t * @param userName\n\t * @param userPassword\n\t * @return\n\t */\n\t@GetMapping(\"/updateUser\")\n\tpublic String updateUser(String name, Integer age) {\n\t\tQueryWrapper wrapper = new QueryWrapper<User>();\n\t\twrapper.eq(\"name\", name);\n\t\tUser user = userMapper.selectOne(wrapper);\n\t\tuser.setAge(age);\n\t\tInteger index = userMapper.updateById(user);\n\t\tif (index > 0) {\n\t\t\treturn \"已修改用户信息：\" + user.toString();\n\t\t} else {\n\t\t\treturn \"修改用户失败\";\n\t\t}\n\t}\n\n\t/**\n\t * 删除用户\n\t * http://localhost:8726/user/deleteUser?name=alan\n\t *\n\t * @param id\n\t * @param userName\n\t * @param userPassword\n\t * @return\n\t */\n\t@GetMapping(\"/deleteUser\")\n\tpublic String deleteUser(String name) {\n\t\tQueryWrapper wrapper = new QueryWrapper<User>();\n\t\twrapper.eq(\"name\", name);\n\t\tUser user = userMapper.selectOne(wrapper);\n\t\tInteger index = userMapper.deleteById(user.getId());\n\t\tif (index > 0) {\n\t\t\treturn \"已删除用户：\" + user.toString();\n\t\t} else {\n\t\t\treturn \"删除用户失败\";\n\t\t}\n\t}\n}\n```\n\n### Junit测试\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class UserTest {\n   @Autowired\n   private UserMapper userMapper;\n   @Test\n   public void testSelect() {\n      List<User> userList = userMapper.getByNameSQLXML(\"alan\");\n      userList.forEach(System.out::println);\n   }\n}\n\n```\n\n### 自动生成代码\n\n通过 MysqlGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率，MyBatis-Plus 从 `3.0.3` 之后移除了代码生成器与模板引擎的默认依赖，需要手动添加相关依赖：mybatis-plus-generator，使用前请修改项目的数据源连接信息。\n\n```java\npublic class MysqlGenerator {\n\n    static final String OUT_PUT_DIR = \"/doraemon/src/main/java\";\n    static final String AUTHOR =\"Alan Ma\";\n    static final String DB_URL = \"jdbc:mysql://localhost:3306/test?useUnicode=true&useSSL=false&characterEncoding=utf8\";\n    static final String USER_NAME =\"root\";\n    static final String PASSWORD =\"password\";\n    static final String PARENT_PACKAGE = \"com.mxw.doraemon\";\n    static final String SUPER_ENTITY_CLASS=PARENT_PACKAGE+\".common.BaseEntity\";\n    static final String SUPER_CONTROLLER_CLASS = PARENT_PACKAGE + \".common.BaseController\";\n    static final String MAPPER_PATH = \"/doraemon/src/main/resources/mapper/\";\n    /**\n     * <p>\n     * 读取控制台内容\n     * </p>\n     */\n    public static String scanner(String tip) {\n        Scanner scanner = new Scanner(System.in);\n        StringBuilder help = new StringBuilder();\n        help.append(\"请输入\" + tip + \"：\");\n        System.out.println(help.toString());\n        if (scanner.hasNext()) {\n            String ipt = scanner.next();\n            if (StringUtils.isNotEmpty(ipt)) {\n                return ipt;\n            }\n        }\n        throw new MybatisPlusException(\"请输入正确的\" + tip + \"！\");\n    }\n\n    /**\n     * RUN THIS\n     */\n    public static void main(String[] args) {\n        // 代码生成器\n        AutoGenerator mpg = new AutoGenerator();\n\n        // 全局配置\n        GlobalConfig gc = new GlobalConfig();\n        String projectPath = System.getProperty(\"user.dir\");\n        gc.setOutputDir(projectPath + OUT_PUT_DIR);\n        gc.setAuthor(AUTHOR);\n        gc.setOpen(false);\n        mpg.setGlobalConfig(gc);\n\n        // 数据源配置\n        DataSourceConfig dsc = new DataSourceConfig();\n        dsc.setUrl(DB_URL);\n        // dsc.setSchemaName(\"public\");\n        dsc.setDriverName(\"com.mysql.jdbc.Driver\");\n        dsc.setUsername(USER_NAME);\n        dsc.setPassword(PASSWORD);\n        mpg.setDataSource(dsc);\n\n        // 包配置\n        PackageConfig pc = new PackageConfig();\n        pc.setModuleName(scanner(\"模块名\"));\n        pc.setParent(PARENT_PACKAGE);\n        mpg.setPackageInfo(pc);\n\n        // 自定义配置\n        InjectionConfig cfg = new InjectionConfig() {\n            @Override\n            public void initMap() {\n                // to do nothing\n            }\n        };\n        List<FileOutConfig> focList = new ArrayList<>();\n        focList.add(new FileOutConfig(\"/templates/mapper.xml.ftl\") {\n            @Override\n            public String outputFile(TableInfo tableInfo) {\n                // 自定义输入文件名称\n                return projectPath + MAPPER_PATH + pc.getModuleName()\n                        + \"/\" + tableInfo.getEntityName() + \"Mapper\" + StringPool.DOT_XML;\n            }\n        });\n        cfg.setFileOutConfigList(focList);\n        mpg.setCfg(cfg);\n        mpg.setTemplate(new TemplateConfig().setXml(null));\n\n        // 策略配置\n        StrategyConfig strategy = new StrategyConfig();\n        strategy.setNaming(NamingStrategy.underline_to_camel);\n        strategy.setColumnNaming(NamingStrategy.underline_to_camel);\n        strategy.setSuperEntityClass(SUPER_ENTITY_CLASS);\n        strategy.setEntityLombokModel(true);\n        strategy.setSuperControllerClass(SUPER_CONTROLLER_CLASS);\n        strategy.setInclude(scanner(\"表名\"));\n        strategy.setSuperEntityColumns(\"id\");\n        strategy.setControllerMappingHyphenStyle(true);\n        strategy.setTablePrefix(pc.getModuleName() + \"_\");\n        mpg.setStrategy(strategy);\n        // 选择 freemarker 引擎需要指定如下加，注意 pom 依赖必须有！\n        mpg.setTemplateEngine(new FreemarkerTemplateEngine());\n        mpg.execute();\n    }\n}\n```","tags":["Mybatis-Plus"],"categories":["Mybatis-Plus"]}]